<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Remote.Linq</name>
    </assembly>
    <members>
        <member name="M:Remote.Linq.RemoteQueryable.Create(System.Type,System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject}},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create``1(System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject}},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T">Element type of the <see cref="T:System.Linq.IQueryable`1"/></typeparam>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create(System.Type,System.Func{Remote.Linq.Expressions.Expression,System.Object},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.IQueryResultMapper{System.Object})">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create``1(System.Func{Remote.Linq.Expressions.Expression,System.Object},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.IQueryResultMapper{System.Object})">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T">Element type of the <see cref="T:System.Linq.IQueryable`1"/></typeparam>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create``1(System.Type,System.Func{Remote.Linq.Expressions.Expression,``0},Remote.Linq.IQueryResultMapper{``0},Remote.Linq.TypeSystem.ITypeResolver)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
            <typeparam name="TSource">Data type served by the data provider</typeparam>
        </member>
        <member name="M:Remote.Linq.RemoteQueryable.Create``2(System.Func{Remote.Linq.Expressions.Expression,``1},Remote.Linq.IQueryResultMapper{``1},Remote.Linq.TypeSystem.ITypeResolver)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T">Element type of the <see cref="T:System.Linq.IQueryable`1"/></typeparam>
            <typeparam name="TSource">Data type served by the data provider</typeparam>
        </member>
        <member name="M:Remote.Linq.AsyncRemoteQueryable.Create(System.Type,System.Func{Remote.Linq.Expressions.Expression,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject}}},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
        </member>
        <member name="M:Remote.Linq.AsyncRemoteQueryable.Create``1(System.Func{Remote.Linq.Expressions.Expression,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject}}},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T">Element type of the <see cref="T:System.Linq.IQueryable`1"/></typeparam>
        </member>
        <member name="M:Remote.Linq.AsyncRemoteQueryable.Create(System.Type,System.Func{Remote.Linq.Expressions.Expression,System.Threading.Tasks.Task{System.Object}},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.IAsyncQueryResultMapper{System.Object})">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
        </member>
        <member name="M:Remote.Linq.AsyncRemoteQueryable.Create``1(System.Func{Remote.Linq.Expressions.Expression,System.Threading.Tasks.Task{System.Object}},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.IAsyncQueryResultMapper{System.Object})">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T">Element type of the <see cref="T:System.Linq.IQueryable`1"/></typeparam>
        </member>
        <member name="M:Remote.Linq.AsyncRemoteQueryable.Create``1(System.Type,System.Func{Remote.Linq.Expressions.Expression,System.Threading.Tasks.Task{``0}},Remote.Linq.IAsyncQueryResultMapper{``0},Remote.Linq.TypeSystem.ITypeResolver)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
            <typeparam name="TSource">Data type served by the data provider</typeparam>
        </member>
        <member name="M:Remote.Linq.AsyncRemoteQueryable.Create``2(System.Func{Remote.Linq.Expressions.Expression,System.Threading.Tasks.Task{``1}},Remote.Linq.IAsyncQueryResultMapper{``1},Remote.Linq.TypeSystem.ITypeResolver)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T">Element type of the <see cref="T:System.Linq.IQueryable`1"/></typeparam>
            <typeparam name="TSource">Data type served by the data provider</typeparam>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.#ctor">
            <summary>
            Creates a new instance of a dynamic object
            </summary>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.#ctor(System.Type)">
            <summary>
            Creates a new instance of a dynamic object, setting the specified type
            </summary>
            <param name="type">The type to be set</param>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.#ctor(Remote.Linq.TypeSystem.TypeInfo)">
            <summary>
            Creates a new instance of a dynamic object, setting the specified type
            </summary>
            <param name="type">The type to be set</param>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Creates a new instance of a dynamic object, setting the specified members
            </summary>
            <param name="members">Initial collection of properties and values</param>
            <exception cref="T:System.ArgumentNullException">The specified members collection is null</exception>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.#ctor(System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject.Property})">
            <summary>
            Creates a new instance of a dynamic object, setting the specified members
            </summary>
            <param name="members">Initial collection of properties and values</param>
            <exception cref="T:System.ArgumentNullException">The specified members collection is null</exception>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.#ctor(System.Object,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates a new instance of a dynamic object, representing the object structure defined by the specified object
            </summary>
            <param name="obj">The object to be represented by the new dynamic object</param>
            <param name="mapper">Optional instance of dynamic object mapper</param>
            <exception cref="T:System.ArgumentNullException">The specified object is null</exception>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.Set(System.String,System.Object)">
            <summary>
            Sets a member and it's value
            </summary>
            <param name="name">Name of the member to be assigned</param>
            <param name="value">The value to be set</param>
            <returns>The value specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.Get(System.String)">
            <summary>
            Gets a member's value or null if the specified member is unknown
            </summary>
            <returns>The value assigned to the member specified, null if member is not set</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.Add(System.String,System.Object)">
            <summary>
            Adds a member and it's value
            </summary>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.Add(Remote.Linq.Dynamic.DynamicObject.Property)">
            <summary>
            Adds a property
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.Remove(System.String)">
            <summary>
            Removes a member and it's value
            </summary>
            <returns>True if the member is successfully found and removed; otherwise, false</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.TryGet(System.String,System.Object@)">
            <summary>
            Gets the value assigned to the specified member
            </summary>
            <param name="name">The name of the member</param>
            <param name="value">When this method returns, contains the value assgned with the specified member, 
            if the member is found; null if the member is not found.</param>
            <returns>True is the dynamic object contains a member with the specified name; otherwise false</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.GetEnumerator">
            <summary>
            Returns a collection of key-value-pairs representing the members and their values hold by this dynamic object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.CreateObject(Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of the object represented by this dynamic object.
            </summary>
            <remarks>Requires the Type property to be set on this dynamic object.</remarks>
            <param name="mapper">Optional instance of dynamic object mapper</param>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.CreateObject(System.Type,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of the object type specified and populates the object structure represented by this dynamic object.
            </summary>
            <param name="type">Type of object to be created</param>
            <param name="mapper">Optional instance of dynamic object mapper</param>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.CreateObject``1(Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of the object type specified and populates the object structure represented by this dynamic object.
            </summary>
            <typeparam name="T">Type of object to be created</typeparam>
            <param name="mapper">Optional instance of dynamic object mapper</param>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObject.CreateDynamicObject(System.Object,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates a dynamic objects representing the object structure defined by the specified object
            </summary>
            <param name="mapper">Optional instance of dynamic object mapper</param>
        </member>
        <member name="P:Remote.Linq.Dynamic.DynamicObject.Type">
            <summary>
            Gets or sets the type of object represented by this dynamic object instance
            </summary>
        </member>
        <member name="P:Remote.Linq.Dynamic.DynamicObject.MemberCount">
            <summary>
            Gets the count of members (dynamically added properties) hold by this dynamic object
            </summary>
        </member>
        <member name="P:Remote.Linq.Dynamic.DynamicObject.MemberNames">
            <summary>
            Gets a collection of member names hold by this dynamic object
            </summary>
        </member>
        <member name="P:Remote.Linq.Dynamic.DynamicObject.Values">
            <summary>
            Gets a collection of member values hold by this dynamic object
            </summary>
        </member>
        <member name="P:Remote.Linq.Dynamic.DynamicObject.Item(System.String)">
            <summary>
            Gets or sets a member value
            </summary>
            <param name="name">Name of the member to set or get</param>
            <returns>Value of the member specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.IDynamicObjectMapper.Map(Remote.Linq.Dynamic.DynamicObject,System.Type)">
            <summary>
            Maps a <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> into a collection of objects
            </summary>
            <param name="obj"><see cref="T:Remote.Linq.Dynamic.DynamicObject"/> to be mapped</param>
            <param name="targetType">Target type for mapping, set this parameter to null if type information included within <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> should be used.</param>
            <returns>The object created based on the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.IDynamicObjectMapper.Map``1(Remote.Linq.Dynamic.DynamicObject)">
            <summary>
            Maps a <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> into an instance of <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type in which the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> have to be mapped to</typeparam>
            <param name="obj"><see cref="T:Remote.Linq.Dynamic.DynamicObject"/> to be mapped</param>
            <returns>The object created based on the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.IDynamicObjectMapper.Map(System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject},System.Type)">
            <summary>
            Maps a collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s into a collection of objects
            </summary>
            <param name="objects">Collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> to be mapped</param>
            <param name="targetType">Target type for mapping, set this parameter to null if type information included within individual <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s should be used.</param>
            <returns>Collection of objects created based on the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.IDynamicObjectMapper.Map``1(System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject})">
            <summary>
            Maps a collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s into a collection of <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type in which the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> have to be mapped to</typeparam>
            <param name="objects">Collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s to be mapped</param>
            <returns>Collection of <typeparamref name="T"/> created based on the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.IDynamicObjectMapper.MapObject(System.Object,System.Boolean)">
            <summary>
            Mapps the specified instance into a <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>
            </summary>
            <param name="obj">The instance to be mapped</param>
            <param name="setTypeInformation">Set this parameter to true if type information should be included within the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>, set it to false otherwise.</param>
            <returns>An instance of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> representing the mapped instance</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.IDynamicObjectMapper.MapCollection(System.Object,System.Boolean)">
            <summary>
            Maps a collection of objects into a collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>
            </summary>
            <param name="objects">The objects to be mapped</param>
            <param name="setTypeInformation">Set this parameter to true if type information should be included within the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s, set it to false otherwise.</param>
            <returns>A collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> representing the objects specified</returns>
        </member>
        <member name="F:Remote.Linq.Dynamic.DynamicObjectMapper.LocalRegexOptions">
            <summary>
            Platform specific regex options (WinRT, WP, SL)
            </summary>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.#ctor(Remote.Linq.TypeSystem.ITypeResolver,System.Collections.Generic.IEnumerable{System.Type},System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Remote.Linq.Dynamic.DynamicObjectMapper"/>
            </summary>
            <param name="typeResolver">Instance of <see cref="T:Remote.Linq.TypeSystem.ITypeResolver"/> to be used to resolve types</param>
            <param name="knownTypes">Types not required to be mapped into <see cref="T:Remote.Linq.Dynamic.DynamicObject"/></param>
            <param name="silentlySkipUnassignableMembers">If set to true properties which cannot be assigned due to a type mismatch are silently skipped, 
            if set to false no validation will be performed resulting in an exception when trying to assign a property value with an unmatching type.</param>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.Map(Remote.Linq.Dynamic.DynamicObject,System.Type)">
            <summary>
            Maps a <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> into a collection of objects
            </summary>
            <param name="obj"><see cref="T:Remote.Linq.Dynamic.DynamicObject"/> to be mapped</param>
            <param name="targetType">Target type for mapping, set this parameter to null if type information included within <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> should be used.</param>
            <returns>The object created based on the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.Map``1(Remote.Linq.Dynamic.DynamicObject)">
            <summary>
            Maps a <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> into an instance of <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type in which the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> have to be mapped to</typeparam>
            <param name="obj"><see cref="T:Remote.Linq.Dynamic.DynamicObject"/> to be mapped</param>
            <returns>The object created based on the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.Map``1(System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject})">
            <summary>
            Maps a collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s into a collection of <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The target type in which the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> have to be mapped to</typeparam>
            <param name="objects">Collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s to be mapped</param>
            <returns>Collection of <typeparamref name="T"/> created based on the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.MapCollection(System.Object,System.Boolean)">
            <summary>
            Maps a collection of objects into a collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>
            </summary>
            <param name="objects">The objects to be mapped</param>
            <param name="setTypeInformation">Set this parameter to true if type information should be included within the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>s, set it to false otherwise.</param>
            <returns>A collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> representing the objects specified</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.MapObject(System.Object,System.Boolean)">
            <summary>
            Mapps the specified instance into a <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>
            </summary>
            <remarks>Null references and <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> are not mapped.</remarks>
            <param name="obj">The instance to be mapped</param>
            <param name="setTypeInformation">Set this parameter to true if type information should be included within the <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>, set it to false otherwise.</param>
            <returns>An instance of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/> representing the mapped instance</returns>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.MapInternal(System.Object,System.Boolean)">
            <summary>
            Maps an object to a dynamic object
            </summary>
            <remarks>Null references and dynamic objects are not mapped.</remarks>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.MapToDynamicObjectIfRequired(System.Object,System.Boolean)">
            <summary>
            Maps from object to dynamic object if required.
            </summary>
            <remarks>Null references, strings, value types, and dynamic objects are no mapped.</remarks>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.PopulateObjectMembers(System.Type,System.Object,Remote.Linq.Dynamic.DynamicObject,System.Boolean)">
            <summary>
            Extrancts member values from source object and populates to dynamic object 
            </summary>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.GetUninitializedObject(System.Type)">
            <summary>
            Not supported for this platform (WinRT, WP, SL)
            </summary>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.PopulateObjectMembers(System.Type,Remote.Linq.Dynamic.DynamicObject,System.Object)">
            <summary>
            Not supported for this platform (WinRT, WP, SL)
            </summary>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.MapObjectMembers(System.Object,Remote.Linq.Dynamic.DynamicObject,System.Boolean)">
            <summary>
            Not supported for this platform (WinRT, WP, SL)
            </summary>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.ObjectFormatterContext`2.TryGetOrCreateNew(System.Type,`0,System.Func{System.Type,`0,`1},System.Action{System.Type,`0,`1})">
            <summary>
            Returns an existing instance if found in the reference map, creates a new instance otherwise
            </summary>
        </member>
        <member name="M:Remote.Linq.Dynamic.DynamicObjectMapper.ObjectFormatterContext`2.TryGetOrCreateNew(System.Type,`0,System.Func{System.Type,`0,System.Boolean,`1},System.Action{System.Type,`0,`1,System.Boolean},System.Boolean)">
            <summary>
            Returns an existing instance if found in the reference map, creates a new instance otherwise
            </summary>
        </member>
        <member name="M:Remote.Linq.Expressions.ExpressionExtensions.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the <see cref="T:System.Linq.Expressions.Expression"/> and returns the raw result
            </summary>
            <param name="expression">The <see cref="T:System.Linq.Expressions.Expression"/> to be executed</param>
            <returns>Execution result of the <see cref="T:System.Linq.Expressions.Expression"/> specified</returns>
        </member>
        <member name="M:Remote.Linq.Expressions.ExpressionExtensions.Execute(Remote.Linq.Expressions.Expression,System.Func{System.Type,System.Linq.IQueryable},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Composes and executes the query based on the <see cref="T:Remote.Linq.Expressions.Expression"/> and mappes the result into dynamic objects
            </summary>
            <param name="expression">The <see cref="T:Remote.Linq.Expressions.Expression"/> to be executed</param>
            <param name="queryableProvider">Delegate to provide <see cref="T:System.Linq.IQueryable"/> instances based on <see cref="T:System.Type"/>s</param>
            <param name="typeResolver">Optional instance of <see cref="T:Remote.Linq.TypeSystem.ITypeResolver"/> to be used to translate <see cref="T:Remote.Linq.TypeSystem.TypeInfo"/> into <see cref="T:System.Type"/> objects</param>
            <param name="mapper">Optional instance of <see cref="T:Remote.Linq.Dynamic.IDynamicObjectMapper"/></param>
            <returns>The mapped result of the query execution</returns>
        </member>
        <member name="M:Remote.Linq.Expressions.ExpressionExtensions.ConvertResultToDynamicObjects(System.Object,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Converts the query result into a collection of <see cref="T:Remote.Linq.Dynamic.DynamicObject"/>
            </summary>
            <param name="queryResult">The reult of the query execution</param>
            <param name="mapper">Optional instance of <see cref="T:Remote.Linq.Dynamic.IDynamicObjectMapper"/></param>
            <returns>The mapped query result</returns>
        </member>
        <member name="M:Remote.Linq.Expressions.ExpressionExtensions.PrepareForExecution(Remote.Linq.Expressions.Expression,System.Func{System.Type,System.Linq.IQueryable},Remote.Linq.TypeSystem.ITypeResolver)">
            <summary>
            Prepares the query <see cref="T:Remote.Linq.Expressions.Expression"/> to be able to be executed. <para/> 
            Use this method if you wan to execute the <see cref="T:System.Linq.Expressions.Expression"/> and map the raw result yourself.
            </summary>
            <param name="expression">The <see cref="T:Remote.Linq.Expressions.Expression"/> to be executed</param>
            <param name="queryableProvider">Delegate to provide <see cref="T:System.Linq.IQueryable"/> instances based on <see cref="T:System.Type"/>s</param>
            <param name="typeResolver">Optional instance of <see cref="T:Remote.Linq.TypeSystem.ITypeResolver"/> to be used to translate <see cref="T:Remote.Linq.TypeSystem.TypeInfo"/> into <see cref="T:System.Type"/> objects</param>
            <returns>A <see cref="T:System.Linq.Expressions.Expression"/> ready for execution</returns>
        </member>
        <member name="T:Remote.Linq.ExpressionVisitors.ExpressionEvaluator">
            <summary>  
            Enables the partial evalutation of queries.  
            From http://msdn.microsoft.com/en-us/library/bb546158.aspx  
            </summary>  
        </member>
        <!-- Badly formed XML comment ignored for member "M:Remote.Linq.ExpressionVisitors.ExpressionEvaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:Remote.Linq.ExpressionVisitors.ExpressionEvaluator.PartialEval(System.Linq.Expressions.Expression)" -->
        <!-- Badly formed XML comment ignored for member "T:Remote.Linq.ExpressionVisitors.ExpressionEvaluator.SubtreeEvaluator" -->
        <member name="T:Remote.Linq.ExpressionVisitors.ExpressionVisitorBase">
            <summary>
            From http://msdn.microsoft.com/en-us/library/bb882521.aspx
            </summary>
            <remarks>
            In this expression tree visitor implementation, the Visit method, which should be called first, 
            dispatches the expression it is passed to one of the more specialized visitor methods in the class, 
            based on the type of the expression. The specialized visitor methods visit the sub-tree of the 
            expression they are passed. If a sub-expression changes after it has been visited, for example by 
            an overriding method in a derived class, the specialized visitor methods create a new expression 
            that includes the changes in the sub-tree. Otherwise, they return the expression that they were passed. 
            This recursive behavior enables a new expression tree to be built that either is the same as or a 
            modified version of the original expression that was passed to Visit.
            </remarks>
        </member>
        <member name="T:Remote.Linq.ExpressionVisitors.ExpressionEvaluator.Nominator">
            <summary>  
            Performs bottom-up analysis to determine which nodes can possibly  
            be part of an evaluated sub-tree.  
            </summary>  
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToRemoteLinqExpression(System.Linq.Expressions.Expression)">
            <summary>
            Translates a given expression into a remote linq expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToRemoteLinqExpression(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Translates a given lambda expression into a remote linq expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression(Remote.Linq.Expressions.Expression)">
            <summary>
            Translates a given query expression into an expression
            </summary>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression(Remote.Linq.Expressions.Expression,Remote.Linq.TypeSystem.ITypeResolver)">
            <summary>
            Translates a given query expression into an expression
            </summary>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression``2(Remote.Linq.Expressions.LambdaExpression)">
            <summary>
            Translates a given query expression into a lambda expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression(Remote.Linq.Expressions.LambdaExpression)">
            <summary>
            Translates a given query expression into a lambda expression
            </summary>
        </member>
        <member name="M:Remote.Linq.ExpressionTranslator.ToLinqExpression(Remote.Linq.Expressions.LambdaExpression,Remote.Linq.TypeSystem.ITypeResolver)">
            <summary>
            Translates a given query expression into a lambda expression
            </summary>
        </member>
        <member name="P:Remote.Linq.TypeSystem.TypeInfo.Type">
            <summary>
            Resolves this type info instance to it's type using the default type resolver instance.
            </summary>
        </member>
        <member name="P:Remote.Linq.TypeSystem.TypeResolver.Instance">
            <summary>
            Sets or gets an instance of ITypeResolver.
            </summary>
            <remarks>
            Setting this property allows for registring a custom type resolver. 
            Setting this property to null makes it fall-back to the default resolver.
            </remarks>
        </member>
        <member name="T:System.Reflection.BindingFlags">
            <summary>
            Internal attribute as a NONFUNCTIONAL placeholder of it's .NET framework version
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Default">
            <summary>
            Specifies no binding flag.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Instance">
            <summary>
            Specifies that instance members are to be included in the search.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Static">
            <summary>
            Specifies that static members are to be included in the search.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.Public">
            <summary>
            Specifies that public members are to be included in the search.
            </summary>
        </member>
        <member name="F:System.Reflection.BindingFlags.NonPublic">
            <summary>
            Specifies that non-public members are to be included in the search.
            </summary>
        </member>
        <member name="M:Remote.Linq.IQuery.Where(Remote.Linq.Expressions.LambdaExpression)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate">A lambda expression to test each element for a condition.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery.OrderBy(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="lambdaExpression">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery.OrderByDescending(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IOrderedQuery.ThenBy(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="sortExpression">A sort expression to extract a key from each element and define a sort direction.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IOrderedQuery.ThenByDescending(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <param name="sortExpression">A sort expression to extract a key from each element and define a sort direction.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="lambdaExpression">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IQuery`1.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IOrderedQuery`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.IOrderedQuery`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.#ctor(System.Type,System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.LambdaExpression},System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.SortExpression},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new query instance.
            </summary>
            <param name="type">The type to be queried</param>
        </member>
        <member name="M:Remote.Linq.Query.#ctor(Remote.Linq.TypeSystem.TypeInfo,System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.LambdaExpression},System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.SortExpression},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new query instance.
            </summary>
            <param name="typeInfo">The type to be queried</param>
        </member>
        <member name="M:Remote.Linq.Query.Where(Remote.Linq.Expressions.LambdaExpression)">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate">A lambda expression to test each element for a condition.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.OrderBy(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="lambdaExpression">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.OrderByDescending(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.Remote#Linq#IOrderedQuery#ThenBy(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="sortExpression">A sort expression to extract a key from each element and define a sort direction.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.Remote#Linq#IOrderedQuery#ThenByDescending(Remote.Linq.Expressions.SortExpression)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <param name="sortExpression">A sort expression to extract a key from each element and define a sort direction.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query.CreateFromGeneric``1(Remote.Linq.IQuery{``0})">
            <summary>
            Creates a non-generic version of the specified query instance. 
            </summary>
            <param name="query">The query instance to be converted into a non-generc query object.</param>
            <returns>A non-generic version of the specified query instance.</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.#ctor(System.Func{Remote.Linq.Query{`0},System.Collections.Generic.IEnumerable{`0}},System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.LambdaExpression},System.Collections.Generic.IEnumerable{Remote.Linq.Expressions.SortExpression},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new query instance
            </summary>
            <param name="dataProvider">A delegate to be invoked to retrieve the actual data</param>
        </member>
        <member name="M:Remote.Linq.Query`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="lambdaExpression">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function that is represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.Remote#Linq#IOrderedQuery{T}#ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.Remote#Linq#IOrderedQuery{T}#ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
            </summary>
            <typeparam name="TKey">The type of the key returned by the function represented by keySelector.</typeparam>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            <param name="count">The number of elements to skip before returning the remaining elements.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.Take(System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="count">The number of elements to return.</param>
            <returns>A new query instance containing all specified query parameters</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.GetEnumerator">
            <summary>
            Enumerating the query actually invokes the data provider to retrieve data
            </summary>
            <returns>The data retrieved from the data provider.</returns>
        </member>
        <member name="M:Remote.Linq.Query`1.CreateFromNonGeneric(Remote.Linq.IQuery,System.Func{Remote.Linq.Query{`0},System.Collections.Generic.IEnumerable{`0}},Remote.Linq.TypeSystem.ITypeResolver)">
            <summary>
            Creates a generic version of the specified query instance. 
            </summary>
            <param name="query">The query instance to be converted into a generc query object.</param>
            <param name="dataProvider">A delegate to be invoked to retrieve the actual data</param>
            <returns>A generic version of the specified query instance.</returns>
            <exception cref="T:System.Exception">If the query's type does not match the generic type.</exception>
        </member>
        <member name="M:Remote.Linq.EnumerableExtensions.AsQueryable``1(System.Collections.Generic.IEnumerable{``0},System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject}},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource"></param>
            <param name="dataProvider"></param>
            <param name="typeResolver"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.EnumerableExtensions.ApplyQuery``1(System.Collections.Generic.IEnumerable{``0},Remote.Linq.IQuery{``0})">
            <summary>
            Applies this query instance to an enumerable
            </summary>
            <param name="queriable"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.EnumerableExtensions.ApplyQuery``1(System.Collections.Generic.IEnumerable{``0},Remote.Linq.IQuery)">
            <summary>
            Applies this query instance to an enumerable
            </summary>
            <param name="queriable"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.QueryableExtensions.AsQueryable``1(System.Linq.IQueryable{``0},System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject}},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable`1"/> that utilizes the data provider specified
            </summary>
            <param name="resource"></param>
            <param name="dataProvider"></param>
            <param name="typeResolver"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.QueryableExtensions.AsQueryable``1(System.Linq.IQueryable,System.Func{Remote.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{Remote.Linq.Dynamic.DynamicObject}},Remote.Linq.TypeSystem.ITypeResolver,Remote.Linq.Dynamic.IDynamicObjectMapper)">
            <summary>
            Creates an instance of <see cref="T:System.Linq.IQueryable"/> that utilizes the data provider specified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource"></param>
            <param name="dataProvider"></param>
            <param name="typeResolver"></param>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.QueryableExtensions.ApplyQuery``1(System.Linq.IQueryable{``0},Remote.Linq.IQuery{``0})">
            <summary>
            Applies this query instance to a queryable
            </summary>
            <param name="queriable"></param>
            <returns></returns>
        </member>
        <member name="M:Remote.Linq.QueryableExtensions.ApplyQuery``1(System.Linq.IQueryable{``0},Remote.Linq.IQuery)">
            <summary>
            Applies this query instance to a queryable
            </summary>
            <param name="queriable"></param>
            <returns></returns>
        </member>
        <member name="T:Remote.Linq.TransparentCache`2">
            <summary>
            A weak-reference cache that can be hooked-in method calls to serve cached instances 
            or transparently create the requested value if not contained in cache
            </summary>
        </member>
        <member name="M:Remote.Linq.TransparentCache`2.#ctor(System.Int32)">
            <summary>
            Creates an new instance of <see cref="!:TransparentCache"/>
            </summary>
            <param name="cleanupDelay">Number of milliseconds to delay the task to clean-up stale references. Set to -1 to suppress clean-up or 0 to run clean-up synchronously.</param>
        </member>
        <member name="M:Remote.Linq.TransparentCache`2.GetOrCreate(`0,System.Func{`0,`1})">
            <summary>
            Returns the cached value if it's contained in the cache, otherwise it creates and adds the value to the cache.
            </summary>
            <remarks>
            This method also performes a cleanup of stale references according the cleanup-delay specified via cunstructor parameter.
            The cleanup task is started only if no other cleanup is pending.
            </remarks>
        </member>
        <member name="M:Remote.Linq.TransparentCache`2.CleanUpStaleReferences">
            <summary>
            Removed cached items with stale references.
            </summary>
        </member>
        <member name="T:Remote.Linq.NonSerializedAttribute">
            <summary>
            Internal attribute as a NONFUNCTIONAL placeholder of it's .NET framework version
            </summary>
        </member>
        <member name="T:Remote.Linq.SerializableAttribute">
            <summary>
            Internal attribute as a NONFUNCTIONAL placeholder of it's .NET framework version
            </summary>
        </member>
        <member name="T:Remote.Linq.VariableQueryArgument">
            <summary>
            This type is used to distinguish variable query arguments from constant query arguments
            </summary>
        </member>
        <member name="T:Remote.Linq.VariableQueryArgument`1">
            <summary>
            This type is used to distinguish variable query arguments from constant query arguments
            </summary>
            <typeparam name="T">Type of the query argument</typeparam>
        </member>
        <member name="T:Remote.Linq.VariableQueryArgumentList">
            <summary>
            This type is used to distinguish variable query arguments from constant query arguments
            </summary>
        </member>
    </members>
</doc>
